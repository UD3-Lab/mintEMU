---
title: "The Legacy of the European Post-Master in Urbanism at TU Delft: A Text Mining Approach"
author:
  - Claudiu Forgaci:
      correspondence: "yes"
      email: C.Forgaci@tudelft.nl
      orcid: 0000-0003-3218-5102
      institute: tud
institute:
  - tud:
      name: Delft University of Technology
      address: Julianalaan 134, 2628 BL, Delft, Zuid-Holland, The Netherlands
title-block-published: "Last updated"  
date: now
date-format: long
format: 
  docx:
    reference-doc: "../templates/template.docx" # Insert path for the DOCX file
execute:
  echo: true
  warning: false
  message: false
  comment: "#>"
  fig-path: "../figures/"
  fig-dpi: 600
filters:
  - ../templates/scholarly-metadata.lua
  - ../templates/author-info-blocks.lua
  - ../templates/pagebreak.lua
bibliography: references.bib
csl: "../templates/journal-of-archaeological-science.csl" # Insert path for the bib-style
abstract: |
  Text of abstract
keywords: |
  urbanism; education; post-master; text mining
highlights: |
  These are the highlights. 
---

<!-- With the following code you can access and display values from the yml header above. -->

Keywords: `r rmarkdown::metadata$keywords`

Highlights: `r rmarkdown::metadata$highlights`

<!-- The actual document text starts here: -->

```{r setup}
#| echo: false
#| warning: false

# Load packages ----
## List packages to be loaded
packages <- c(
  "here",                               # Managing paths
  "tidyverse", "reshape2", "widyr",     # Data manipulation and visualisation
  "furrr",                              # Parallel use of purrr::map() functions
  "tidytext", "SnowballC", "tm",        # Text processing and analysis
  "topicmodels", "LDAvis", "tsne",      # Topic modeling
  "tidygeocoder",                       # Working with spatial data
  "igraph", "ggraph"                    # Network analysis and visualization
)

## Load required packages, install them if needed
for (package in packages) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package,  "http://cran.us.r-project.org")
  }
  library(package, character.only = TRUE)
}


# Load analysis functions ----
devtools::load_all(".")


# Read thesis metadata ----
data_path <- here("analysis", "data", "raw_data")
pdf_names <- dir(data_path, pattern = "*.pdf")

## Read metadata for all theses
all_theses <-
  readxl::read_xlsx(path = here(data_path, "theses-all.xlsx"))

## Read only metadata for theses with PDF available
emu_theses <- 
  read_csv(here(data_path, "theses-metadata.csv")) |>
  mutate(text = "") |>
  filter(!is.na(pdf_via))

pdf_paths <- here(data_path, emu_theses$file_name)
```

```{r get-pdf-text}
#| echo: false
#| cache: true

data_path <- here("analysis", "data", "derived_data", "emu_theses_with_text_and_location.csv")

if (!file.exists(data_path)) {
  # On the first run, this function might take extra time as a Python environment needs to be set up
  emu_theses$text <- convert_pdf_text(pdf_paths)
  
  # Add latitude and longitude information to theses data frame
  emu_theses <- geocode_thesis_locations(emu_theses)

  # Write thesis dataframe to file
  write_csv(emu_theses, data_path)
} else {
  emu_theses$text <- read_csv(data_path)$text
  emu_theses$longitude <- read_csv(data_path)$longitude
  emu_theses$latitude <- read_csv(data_path)$latitude
}

```

```{r clean-text}
#| echo: false

emu_theses$text_clean <- emu_theses$text |>
  clean_basic() 
  
```

# Introduction

The research presented in this paper was prompted by the closure of the European post-Master of Urbanism (EMU) of the Department of Urbanism at the Faculty of Architecture and the Built Environment, TU Delft. The EMU was an advanced master ran jointly by TU Delft, KU Leuven, UPC Barcelona and Universit√† IUAV di Venezia. <!-- Complete paragraph about the program -->

Distinctive features of the program:  
- as a postmaster, it only accepted applicants with a prior MSc degree and experience in practice
- provides a bridge towards PhD-level research
- all students had an exchange semester at one of the other three program universities



In order to describe the legacy of the EMU program, including the distinctive features of its didactic approach, this paper aims to reveal the main topics taught in it and how those topics had evolved through the years of the program. To that end, we employed a text mining approach in which we analysed its output: `r nrow(all_theses)` theses with an average of `r mean(str_length(emu_theses$text_clean), na.rm = TRUE)` words produced over the years for the duration of the program between `r paste0(min(all_theses$grad_year, na.rm = TRUE), "-", max(all_theses$grad_year, na.rm = TRUE))`. 

# Methods

Research questions:

-   What were the main topics addressed in the EMU program?

-   How did those topics evolve throughout the duration of the program between 2007-2021?

-   To what extent were the topics and evolution thereof influenced by the assignments given to the students throughout their studies leading up to their thesis?

-   To what extent were the topics and evolution thereof influenced by the exchange semester followed by the students?
    - Use LDA clustering with 3 classes (corresponding to the three exchange universities) to see how well the clustering is aligned with where the student carried out their exchange semester. Use a confusion matrix to visualize the relation between real values and values assigned through clustering. 

## Data collection

The theses are available in PDF format with complex layouts typical to an urbanism project in which text and various types of graphics are combined. With the exception of a bilingual English-Spanish thesis, all thesis were written in English.

The imported dataset contains the text data in the `text` column and related metadata in the other columns... 

A total number of `r nrow(emu_theses)` out of `r nrow(all_theses)` were analysed.

```{r fig-map-theses}
#| warning: false 
#| echo: false
#| fig-cap: "Location of EMU theses included in the analysis"

# Show thesis locations on world map
visualize_thesis_locations(emu_theses)
```

@fig-map-theses shows the geographic spread of the theses included in the analysis.

## Data analysis

### Pre-processing

Word-level tokenisation was applied with the `unnest_tokens()` function of the `tidytext` package. This was preferred over other tokenisers as it produced results that work seamlessly with other `tidyverse` tools used in the analysis.

For analyses in which word-level tokens were used, stop words, i.e., common words or words that do not add much meaning, were removed in the pre-processing stage. Global, subject-specific and document stop words [@hvitfeldt2021a] were differentiated. As all theses were written in English, the pre-made "snowball" lexicon was used to remove global stop words. <!-- We tried to create a custom global stop word list on the entire corpus, by removing high-frequency words, starting with 20 words and increasing by 10 until reaching words that are not appropriate as stop words, but no significant improvement was observed in the result. --> We manually constructed a list of subject-specific stop words based on our domain knowledge. Words that are commonly used to structure a theses, such as "preface", "contents", and "introduction", were added as subject-specific stop words as well. Finally, titles and author names were removed as document stop words. In the next pre-processing step, we normalised the resulting words, that is, reduced them to their canonical dictionary forms, the resulting words were lemmatised [@hvitfeldt2021a]. Lemmatisation was preferred over stemming as the former tends to be more meaningful and less degrading than the latter.

```{r stop-words}

# Add cleaned text column with removed stop words
emu_theses$text_clean <- emu_theses$text_clean |>
  str_remove_all(find_meta_stopwords(emu_theses)) |> 
  str_remove_all(urbanism_stopwords(
    add_stopwords = c("emu", "european postgraduate master in urbanism", "tu delft", "ku leuven", "upcs barcelona", "iuav venice", 
                      "space", "spatial", "spaces", "plan", "public", "development"))) |>
  str_remove_all(thesis_stopwords(add_stopwords = c("advisor", "prof", "fig", "ure", "ning")))

# Unnest words and remove words of one and two letters
emu_theses_words <- emu_theses |> 
  select(title, text_clean) |> 
  unnest_tokens(output = word, input = text_clean) |>  # remove punctuation, convert to lower-case, separate all words
  anti_join(tidytext::stop_words, by = "word") |>  # remove stop words
  mutate(word = textstem::lemmatize_words(word))  # lemmatise words

```

Finally, additional checks were made to the document in search for previously undetected stop words. Short words of one and two letters could be safely removed, while three-letter words were kept, as many of those, including "map" and "low", were meaningful and occurring in high frequency.

```{r short-stop-words}
#| dependson: stop-words

#short_words(emu_theses_words$word, l_word = 3, l_list = 100)

emu_theses_words <- emu_theses_words |>  
  filter(nchar(word) >= 3)  # keep only words that are at least three letters long

```

### Topic model

Similar to clustering on numeric data, topic modeling is a method of unsupervised classification of topics found in a group of documents [@silge2017]. We used the Latent Dirichlet Allocation (LDA) algorithm for topic modeling. In LDA, each document is a mixture of topics and each topic is a mixture of words. The probability of a term being part of a topic is given by the $\beta$ (beta) statistic, while the probability of a document being part of a topic is given by the $\theta$ (theta) statistic.

The number of topics was qualitatively determined

```{r topic-model-lda}
#| dependson: short-stop-words

# Prepare document-term matrix as input for LDA model
# Reduce the size of the DTM by excluding words with a frequency lower than 5
emu_dtm <- convert_to_dtm(emu_theses_words, 
                          title_col = "title", 
                          word_col = "word", 
                          min_term_freq = 5)

# Fit LDA model with K clusters
# # Determine K value empirically
# K = get_number_of_topics(emu_dtm)
# # This returns K = 23
# TODO run the model with K = 23 and compare with results using qualitative value

# Determine K value qualitatively
# K = 5 corresponds to the 2 TUD semesters and the 3 exchange semesters combined 
emu_lda <- LDA(emu_dtm, k = 5, method="Gibbs",
               control = list(seed = 2023, iter = 500, verbose = 25))

# Extract beta and theta statistics from LDA model
beta <- posterior(emu_lda)$terms
theta <- posterior(emu_lda)$topics 

# Preview 10 terms from each topic
terms(emu_lda, 10)

# Add pseudo-names to topics based on the top 5 words in each topic
topic_names <- name_topics(beta)

```


```{r topic-model-lda}

# What is the dominant topic in each document?
N = 20
topic_prop_examples <- theta[1:N,]
colnames(topic_prop_examples) <- topic_names
vizDataFrame <- melt(cbind(data.frame(topic_prop_examples), 
                           document = factor(rownames(topic_prop_examples))), 
                     variable.name = "topic", id.vars = "document")  
ggplot(data = vizDataFrame, aes(topic, value, fill = document), ylab = "proportion") + 
  geom_bar(stat="identity") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  
  coord_flip() +
  facet_wrap(~ document, ncol = 5) +
  theme(legend.position = "none")

```



```{r}

# What are the most probable topics in the entire collection?
topicProportions <- colSums(theta) / nDocs(emu_dtm)  # mean probabilities over all paragraphs
names(topicProportions) <- topic_names     # assign the topic names we created before
sort(topicProportions, decreasing = TRUE) # show summed proportions in decreased order

soP <- sort(topicProportions, decreasing = TRUE)
paste(round(soP, 5), ":", names(soP))

# How many documents are with the highest probability in each topic?
K = 5
countsOfPrimaryTopics <- rep(0, K)
names(countsOfPrimaryTopics) <- topic_names
for (i in 1:nDocs(emu_dtm)) {
  topicsPerDoc <- theta[i, ] # select topic distribution for document i
  # get first element position from ordered list
  primaryTopic <- order(topicsPerDoc, decreasing = TRUE)[1] 
  countsOfPrimaryTopics[primaryTopic] <- countsOfPrimaryTopics[primaryTopic] + 1
}
sort(countsOfPrimaryTopics, decreasing = TRUE)

so <- sort(countsOfPrimaryTopics, decreasing = TRUE)
paste(so, ":", names(so))
```

```{r}
topicToFilter <- 6  # you can set this manually ...
# ... or have it selected by a term in the topic name (e.g. 'children')
topicToFilter <- grep('river', topic_names)[1] 
topicThreshold <- 0.2
selectedDocumentIndexes <- which(theta[, topicToFilter] >= topicThreshold)
filteredCorpus <- emu_theses[selectedDocumentIndexes,]
# show length of filtered corpus
filteredCorpus
```

```{r}

N = 82
topic_prop_per_year <- theta[1:N,]
colnames(topic_prop_per_year) <- topic_names

vizDataFrameWithYear <- melt(cbind(data.frame(topic_prop_per_year), 
                           document = factor(rownames(topic_prop_per_year))), 
                     variable.name = "topic", id.vars = "document") |> 
    left_join(select(emu_theses, title, "year" = graduation_year), by = c("document" = "title"))

# Plot topic proportions per year
vizDataFrameWithYear |> 
  ggplot(aes(x = factor(year), y = value, fill = topic)) + 
  geom_bar(stat = "identity", position = "fill") +
  scale_fill_viridis_d(name = "Topics") +
  xlab("Graduation year") +
  ylab("Proportion of topics") +
  labs(title = "Topic proportions per year")

```


```{r lda-vis}

# TODO check if this can be included in the Shiny dashboard
# Function to approximate the distance between topics
svd_tsne <- function(x) tsne(svd(x)$u)

# Convert DTM into JSON required by the LDAvis package
json <- LDAvis::createJSON(
  phi = beta, 
  theta = theta, 
  doc.length = rowSums(as.matrix(emu_dtm)), 
  vocab = colnames(emu_dtm), 
  term.frequency = colSums(as.matrix(emu_dtm)),
  mds.method = svd_tsne,
  plot.opts = list(xlab="", ylab="")
)

# Visualise topics model with LDAvis
LDAvis::serVis(json)

```


```{r topic-model-beta}
#| dependson: topic-model-lda

# Extract topics as mixtures of terms from LDA model
beta_tidy <- tidy(emu_lda, matrix = "beta")

# The top n most common words in each topic
emu_theses_top_terms <- get_top_words_per_topic(beta_tidy, 20)

# TODO create visualisation function
emu_theses_top_terms |> 
  ggplot(aes(reorder(term, beta), beta, fill = factor(topic))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic, scales = "free") +
  coord_flip()

# TODO can this be generalised to more than two topics?
# beta_spread <- emu_theses_topics_terms |> 
beta_spread <- emu_theses_topics |> 
  mutate(topic = paste0("topic", topic)) |> 
  spread(topic, beta) |> 
  filter(topic1 > 0.001, topic2 > .001) |> 
  mutate(log_ratio = log2(topic2/topic1))

beta_spread %>%
  group_by(direction = log_ratio > 0) %>%
  slice_max(abs(log_ratio), n = 20) %>% 
  ungroup() %>%
  mutate(term = reorder(term, log_ratio)) %>%
  ggplot(aes(log_ratio, term)) +
  geom_col() +
  labs(x = "Log2 ratio of beta in topic 2 / topic 1", y = NULL)
```



```{r topic-model-gamma}

# Extract documents as mixtures of topics from LDA model
emu_documents <- tidy(emu_lda, matrix = "gamma")

emu_documents |> 
  ggplot(aes(x = reorder(str_sub(document, 1, 50), gamma), y = gamma, fill = topic)) + 
  geom_bar(stat = "identity") + 
  coord_flip()

emu_documents |> 
  inner_join(emu_theses |> 
               select(title, graduation_year), 
             by = c("document" = "title")) |> 
  ggplot(aes(x = reorder(str_sub(document, 1, 50), gamma), y = gamma, fill = topic)) + 
  geom_bar(stat = "identity") + 
  coord_flip() + 
  facet_wrap(~ graduation_year, ncol = 1, scales = "free", drop = TRUE)

emu_documents |> 
  inner_join(emu_theses |> 
               select(title, graduation_year), 
             by = c("document" = "title")) |> 
  ggplot(aes(x = factor(graduation_year), y = topic, fill = factor(topic))) +
  geom_col()
```


# Results

```{r top-words-document}
# Which are the top n most frequently used words in each thesis?
get_top_words_per_document(data = emu_theses_words, top_n = 3)
```



```{r top-words-corpus}
# Which are the top n most frequently used words in all theses?
# TODO add `topic` to `fill` aesthetic
get_top_words_per_corpus(data = emu_theses_words, top_n = 50) |>
  ggplot(aes(reorder(word, n), n)) +
  geom_col(fill = "orange") +
  geom_text(aes(label = n), size = 2, hjust = 1.1) +
  coord_flip() +
  xlab("Word") +
  ylab("Frequency") +
  labs(title = paste0("Top ", n, " most used words in the corpus of theses")) +
  theme_minimal() +
  theme(panel.grid = element_blank())
```

```{r}
#| label: ngrams

## Bigrams
emu_theses_bigrams <- emu_theses |> 
  get_ngrams(n = 2, title_col = "title", text_col = "text_clean", stem = TRUE)

spacyr::spacy_parse(emu_theses_bigrams$w_1)
data.frame(emu_theses_bigrams$w_1, textstem::lemmatize_words(emu_theses_bigrams$w_1))


set.seed(12345)

# with spacy
extract_rand_window <- function(x, p){
    first_index = sample(seq(length(x) - p + 1), 1)
    x[first_index:(first_index + p -1)]
    }

example_lemma <-list()
for (i in 1:10) {
  example_lemma[[i]] <- extract_rand_window(emu_theses_bigrams$w_1,10)
}

Original <- unlist(example_lemma)
Lemmatized <- spacyr::spacy_parse(Original)

# with textstem
Lemmatized2 <- textstem::lemmatize_words(Original) 

lemma_example <- data.frame(Original, Lemmatized2)

lemma_example

data.frame(Lemmatized$token, Lemmatized$lemma, Lemmatized2)



bigram_counts <- emu_theses_bigrams |> 
  count(w_1, w_2, sort = TRUE)

bigram_stem_counts <- emu_theses_bigrams |> 
  count(w_1_stem, w_2_stem, sort = TRUE)

bigram_counts
bigram_stem_counts

## Trigrams
emu_theses_trigrams <- emu_theses |> 
  get_ngrams(n = 3, title_col = "title", text_col = "text")

trigram_counts <- emu_theses_trigrams |> 
  count(w_1, w_2, w_3, sort = TRUE)

trigram_counts

## Bigram tf-idf
bigram_tf_idf <- emu_theses_bigrams |> 
  count(title, ngram) |> 
  bind_tf_idf(ngram, title, n) |> 
  arrange(desc(tf_idf))

bigram_tf_idf

## Trigram tf-idf
trigram_tf_idf <- emu_theses_trigrams |> 
  count(title, ngram) |> 
  bind_tf_idf(ngram, title, n) |> 
  arrange(desc(tf_idf))

trigram_tf_idf

## Show network of bigrams
bigram_graph <- bigram_counts |> 
  filter(n > 100) |> 
  graph_from_data_frame()

bigram_graph

set.seed(2023)

a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
  
ggraph(bigram_graph, layout = "fr") +
  geom_edge_link(aes(edge_alpha = n), show.legend = FALSE, arrow = a) +
  geom_node_point(color = "lightblue", linewidth = 5) +
  geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
  theme_void()

## Higgh frequency bigrams ----

emu_theses_bigrams_top <- emu_theses_bigrams |>
  group_by(title) |>
  count(ngram, sort = TRUE) |>
  slice_max(n, n = 20) |>        ### top_n is superseded; better use slice_max instead
  # filter(n > 50)                ### filter words with a minimum count
  ungroup() |>
  mutate(bigram = reorder(ngram, n))

emu_theses_bigrams_top_all <- emu_theses_bigrams |>
  count(ngram, sort = TRUE) |>
  slice_max(n, n = 20) |>        ### top_n is superseded; better use slice_max instead
  # filter(n > 50)                ### filter words with a minimum count
  mutate(ngram = reorder(ngram, n))

emu_theses_bigrams_top |>
  filter(title == unique(title)[1:10]) |> 
  ggplot(aes(x = ngram, y = n, fill = title)) +
  geom_col() +
  xlab(NULL) +
  coord_flip() +
  labs(y = "Count",
       x = "Unique words",
       title = "Count of unique words found in thesis",
       subtitle = "Stop words were removed from the list") +
  facet_wrap( ~ title, scales = "free", ncol = 2) +
  theme(legend.position = "none") 
```

The `tf-idf` statistic shows words that are the most important to one document in a collection of documents [@silge2017]. In this case, it shows high values for the names of thesis locations that tend to be high-frequency thesis-specific words. 

```{r tf-idf}

## Calculate tf-idf statistic
emu_theses_tf_idf <- emu_theses_words |> 
  get_tf_idf(title_col = "title", word_col = "word")

## Get top n words most specific to each thesis 
emu_theses_tf_idf |> 
  group_by(title) |> 
  top_n(5, tf_idf) |> 
  arrange(desc(tf_idf), .by_group = TRUE)

```



```{r}
# Preview term frequency distributions in a subset of theses
ggplot(emu_theses_words_count |> 
         filter(title == unique(title)[1:6]),
       aes(n/total, fill = title)) +
  geom_histogram(show.legend = FALSE, binwidth = 0.0001) +
  xlim(NA, 0.0009) +
  facet_wrap(~ title, ncol = 3, scales = "free_y")
```



```{r}
# Examine Zipf's law for the EMU theses
## Calculate rank and term frequency
freq_by_rank <- emu_theses_words_count |> 
  group_by(title) |> 
  mutate(rank = row_number(),
         `term frequency` = n/total)

## Visualise Zipf's law
freq_by_rank |> 
  ggplot(aes(rank, `term frequency`, color = title)) +
  geom_line(size = 1.1, alpha = 0.8, show.legend = FALSE) +
  scale_x_log10() +
  scale_y_log10()

rank_subset <- freq_by_rank |> 
  filter(rank < 500,
         rank > 10)

lm(log10(`term frequency`) ~ log10(rank), data =  rank_subset)

freq_by_rank |> 
  ggplot(aes(rank, `term frequency`, color = title)) +
  geom_line(size = 1.1, alpha = 0.8, show.legend = FALSE) +
  geom_abline(intercept = -1.44, slope = -0.7, color = "gray50", linetype = 2) +
  scale_x_log10() +
  scale_y_log10()

## Visualise the top n words with the highest tf-idf values for each of a subset of theses
emu_theses_words_count |> 
  filter(title == unique(title)[1:6]) |> 
  arrange(desc(tf_idf)) |> 
  mutate(word = factor(word, levels = rev(unique(word)))) |> 
  group_by(title) |> 
  top_n(15) |> 
  ungroup() |> 
  ggplot(aes(word, tf_idf, fill = title)) +
  geom_col(show.legend = FALSE) +
  labs(x = NULL, y = "tf-idf") +
  facet_wrap(~ title,  ncol = 3, scales = "free") +
  coord_flip()
```

### Word embeddings  

[Describe word embeddings ...]

```{r word-embeddings-pmi}
#| include: false

# To what extent do words co-occur with other words?
tidy_pmi <- get_pmi(emu_theses, title_col = "title", text_col = "text_clean")

```

The high-dimensional sparse matrix of word features is projected into reduced, 100-dimensional set of features.

```{r word-embeddings-svd}

# Determine word vectors using SVD, a method for dimensionality reduction
tidy_word_vectors <- tidy_pmi |> 
  widely_svd(
    item1, item2, pmi,
    nv = 100, maxit = 1000
  )

```

[What terms should be checked with the function below?]

```{r word-embeddings-nn}

# Calculate nearest neighbours of a given word
tidy_word_vectors |> 
  nearest_neighbors("resilience")

```

The first [?] components... [what do they show?]

```{r word-embeddings-vis}

# The first n components with top words found in the corpus of theses
visualise_first_n_components(tidy_word_vectors, 24, 12)

```


```{r doc-embeddings}

# Summarise word embeddings into document embeddings for modeling purposes
word_matrix <- tidy_emu_theses |> 
  count(title, word) |> 
  cast_sparse(title, word, n)

embedding_matrix <- tidy_word_vectors |> 
  cast_sparse(item1, dimension, value)

doc_matrix <- word_matrix %*% embedding_matrix

dim(doc_matrix)

doc_matrix

```



# Discussion

# Conclusion

# Acknowledgements

<!-- The following line inserts a page break  -->

\newpage

# References

<!-- The following line ensures the references appear here for the MS Word or HTML output files, rather than right at the end of the document (this will not work for PDF files):  -->

::: {#refs}
:::

\newpage

### Colophon

This report was generated on `r Sys.time()` using the following computational environment and dependencies:

```{r}
#| label: colophon
#| cache: false

# which R packages and versions?
if ("devtools" %in% installed.packages()) devtools::session_info()
```

The current Git commit details are:

```{r}
# what commit is this file at? 
if ("git2r" %in% installed.packages() & git2r::in_repository(path = ".")) git2r::repository(here::here())  
```
